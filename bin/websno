#!/usr/bin/env python

import sys

import websno

import websno.server
from websno.stream import EventPickleFile, RATRootFile, ZDABFile, OrcaJSONStream, ZDABDispatch, CouchDBChanges
from websno.store import RackStore, CrateStore, SlotStore
from websno.apps.websnoed import EventViewerNamespace

from websno.record import Record

if __name__ == '__main__':
    # event source
    event_stream = None
    if len(sys.argv) > 1:
        if sys.argv[1].endswith('.pickle'):
            event_stream = EventPickleFile(sys.argv[1])
        elif sys.argv[1].endswith('.root'):    
            event_stream = RATRootFile(sys.argv[1])
        elif sys.argv[1].endswith('.zdab'):
            event_stream = ZDABFile(sys.argv[1])
        else:
            event_stream = ZDABDispatch(sys.argv[1])

    # data stores
    rack_store = RackStore()
    crate_store = CrateStore()
    slot_store = SlotStore()

    # data streams
    ios_stream = CouchDBChanges('http://localhost:5984', 'iostemp')
    orca_json_stream = OrcaJSONStream('localhost')

    # record types
    websno.records = {
        'event_data': Record('event_data', event_stream) if event_stream else None,
        'pmt_base_current': Record('pmt_base_current', orca_json_stream, slot_store),
        'cmos_rate': Record('cmos_rate', orca_json_stream, slot_store),
        'fec_vlt': Record('fec_vlt', orca_json_stream, slot_store),
        'xl3_vlt': Record('xl3_vlt', orca_json_stream, crate_store),
        'fifo_stats': Record('fifo_stats', orca_json_stream, crate_store),
        'rack_low_voltage': Record('rack_low_voltage', ios_stream, rack_store)
    }

    # start streams
    if event_stream:
        if hasattr(event_stream, 'get'):
            EventViewerNamespace.event_getter = event_stream.get
        event_stream.start()
    ios_stream.start()
    orca_json_stream.start()

    # start web/socket server
    websno.server.serve()

    # wait for threads to exit
    event_stream.join()
    ios_stream.join()

